// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2504.701 at 12:24â€¯AM on Wednesday, October 22, 2025.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_X_y has executed. Set this to false to force re-execution of Changed_numberOfIterations_X_y</summary>
		public bool Changed_numberOfIterations_X_y_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_X_y has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_X_y</summary>
		public bool Changed_numberOfIterationsDecreased_Init_X_y_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_X_y has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_X_y</summary>
		public bool Changed_numberOfIterationsDecreased_Init_X_y_isInitialised;
		/// <summary>True if Changed_X has executed. Set this to false to force re-execution of Changed_X</summary>
		public bool Changed_X_isDone;
		/// <summary>True if Changed_y has executed. Set this to false to force re-execution of Changed_y</summary>
		public bool Changed_y_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public Gaussian[] mean_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'phi'</summary>
		public VectorGaussian phi_marginal_F;
		public Gamma precision_F;
		/// <summary>Message to marginal of 'precision'</summary>
		public Gamma precision_marginal_F;
		public Gamma[] precision_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma precision_rep_B_toDef;
		/// <summary>Field backing the X property</summary>
		private Vector[] X_field;
		/// <summary>Message to marginal of 'X'</summary>
		public PointMass<Vector[]> X_marginal_F;
		/// <summary>Field backing the y property</summary>
		private double[] y_field;
		/// <summary>Message to marginal of 'y'</summary>
		public DistributionStructArray<Gaussian,double> y_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'X'</summary>
		public Vector[] X
		{
			get {
				return this.X_field;
			}
			set {
				if ((value!=null)&&(value.Length!=98)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+98)+" was expected for variable \'X\'");
				}
				this.X_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_X_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_X_y_isInitialised = false;
				this.Changed_numberOfIterations_X_y_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'y'</summary>
		public double[] y
		{
			get {
				return this.y_field;
			}
			set {
				if ((value!=null)&&(value.Length!=98)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+98)+" was expected for variable \'y\'");
				}
				this.y_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_y_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_X_y_isInitialised = false;
				this.Changed_numberOfIterations_X_y_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and X and y</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_X_y(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_X_y_isDone) {
				return ;
			}
			DenseVector vVector0 = DenseVector.FromArray(new double[3] { 0.0, 0.0, 0.0 });
			PositiveDefiniteMatrix vPositiveDefiniteMatrix0 = new PositiveDefiniteMatrix(new double[3, 3] { { 1.0, 0.0, 0.0 }, { 0.0, 1.0, 0.0 }, { 0.0, 0.0, 1.0 } });
			VectorGaussian phi_F = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(vVector0.Count));
			this.phi_marginal_F = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(vVector0.Count));
			VectorGaussian phi_rep_F_marginal;
			phi_rep_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(phi_F);
			VectorGaussian phi_rep_B_toDef;
			phi_rep_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(phi_F);
			// Message to 'phi' from SampleFromMeanAndVariance factor
			phi_F = VectorGaussianFromMeanAndVarianceOp.SampleAverageConditional(vVector0, vPositiveDefiniteMatrix0);
			VectorGaussian[] phi_rep_F;
			// Create array for 'phi_rep' Forwards messages.
			phi_rep_F = new VectorGaussian[98];
			for(int dataRange = 0; dataRange<98; dataRange++) {
				phi_rep_F[dataRange] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(vVector0.Count));
			}
			// Create array for replicates of 'phi_rep_F_dataRange__BMean'
			DenseVector[] phi_rep_F_dataRange__BMean = new DenseVector[98];
			for(int dataRange = 0; dataRange<98; dataRange++) {
				phi_rep_F_dataRange__BMean[dataRange] = InnerProductOpBase.BMeanInit(phi_rep_F[dataRange]);
			}
			// Create array for replicates of 'phi_rep_F_dataRange__BVariance'
			PositiveDefiniteMatrix[] phi_rep_F_dataRange__BVariance = new PositiveDefiniteMatrix[98];
			for(int dataRange = 0; dataRange<98; dataRange++) {
				phi_rep_F_dataRange__BVariance[dataRange] = InnerProductOpBase.BVarianceInit(phi_rep_F[dataRange]);
			}
			Gamma precision_rep_F_marginal;
			precision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.precision_F);
			// Message to 'precision' from GammaFromShapeAndRate factor
			this.precision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			Gamma[] precision_rep_F;
			// Create array for 'precision_rep' Forwards messages.
			precision_rep_F = new Gamma[98];
			for(int dataRange = 0; dataRange<98; dataRange++) {
				precision_rep_F[dataRange] = Gamma.Uniform();
			}
			// Create array for replicates of 'mean_B'
			Gaussian[] mean_B = new Gaussian[98];
			for(int dataRange = 0; dataRange<98; dataRange++) {
				mean_B[dataRange] = Gaussian.Uniform();
			}
			VectorGaussian[] phi_rep_B;
			// Create array for 'phi_rep' Backwards messages.
			phi_rep_B = new VectorGaussian[98];
			for(int dataRange = 0; dataRange<98; dataRange++) {
				phi_rep_B[dataRange] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(vVector0.Count));
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				precision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.precision_rep_B_toDef, this.precision_F, precision_rep_F_marginal);
				for(int dataRange = 0; dataRange<98; dataRange++) {
					// Message to 'precision_rep' from Replicate factor
					precision_rep_F[dataRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.precision_rep_B[dataRange], precision_rep_F_marginal, dataRange, precision_rep_F[dataRange]);
					// Message to 'mean' from Gaussian factor
					mean_B[dataRange] = GaussianOp.MeanAverageConditional(this.y[dataRange], this.mean_F[dataRange], precision_rep_F[dataRange], this.precision_rep_B[dataRange]);
					// Message to 'phi_rep' from InnerProduct factor
					phi_rep_B[dataRange] = InnerProductOpBase.BAverageConditional(mean_B[dataRange], this.X[dataRange], phi_rep_B[dataRange]);
				}
				phi_rep_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(phi_rep_B, phi_rep_B_toDef);
				phi_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(phi_rep_B_toDef, phi_F, phi_rep_F_marginal);
				for(int dataRange = 0; dataRange<98; dataRange++) {
					// Message to 'phi_rep' from Replicate factor
					phi_rep_F[dataRange] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(phi_rep_B[dataRange], phi_rep_F_marginal, dataRange, phi_rep_F[dataRange]);
					phi_rep_F_dataRange__BVariance[dataRange] = InnerProductOpBase.BVariance(phi_rep_F[dataRange], phi_rep_F_dataRange__BVariance[dataRange]);
					phi_rep_F_dataRange__BMean[dataRange] = InnerProductOpBase.BMean(phi_rep_F[dataRange], phi_rep_F_dataRange__BVariance[dataRange], phi_rep_F_dataRange__BMean[dataRange]);
					// Message to 'mean' from InnerProduct factor
					this.mean_F[dataRange] = InnerProductOpBase.InnerProductAverageConditional(this.X[dataRange], phi_rep_F_dataRange__BMean[dataRange], phi_rep_F_dataRange__BVariance[dataRange]);
					// Message to 'precision_rep' from Gaussian factor
					this.precision_rep_B[dataRange] = GaussianOp.PrecisionAverageConditional(Gaussian.PointMass(this.y[dataRange]), this.mean_F[dataRange], precision_rep_F[dataRange]);
				}
				this.precision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.precision_rep_B, this.precision_rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'phi_marginal' from Variable factor
			this.phi_marginal_F = VariableOp.MarginalAverageConditional<VectorGaussian>(phi_rep_B_toDef, phi_F, this.phi_marginal_F);
			this.precision_marginal_F = Gamma.Uniform();
			// Message to 'precision_marginal' from Variable factor
			this.precision_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(this.precision_rep_B_toDef, this.precision_F, this.precision_marginal_F);
			this.Changed_numberOfIterations_X_y_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to X and y</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_X_y(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_X_y_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_X_y_isInitialised)) {
				return ;
			}
			for(int dataRange = 0; dataRange<98; dataRange++) {
				this.mean_F[dataRange] = Gaussian.Uniform();
			}
			this.precision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.precision_F);
			for(int dataRange = 0; dataRange<98; dataRange++) {
				this.precision_rep_B[dataRange] = Gamma.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_X_y_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_X_y_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of X</summary>
		private void Changed_X()
		{
			if (this.Changed_X_isDone) {
				return ;
			}
			// Create array for 'X_marginal' Forwards messages.
			this.X_marginal_F = new PointMass<Vector[]>(this.X);
			// Message to 'X_marginal' from DerivedVariable factor
			this.X_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Vector[]>,Vector[]>(this.X, this.X_marginal_F);
			this.Changed_X_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of y</summary>
		private void Changed_y()
		{
			if (this.Changed_y_isDone) {
				return ;
			}
			// Create array for 'y_marginal' Forwards messages.
			this.y_marginal_F = new DistributionStructArray<Gaussian,double>(98);
			for(int dataRange = 0; dataRange<98; dataRange++) {
				this.y_marginal_F[dataRange] = Gaussian.Uniform();
			}
			// Message to 'y_marginal' from DerivedVariable factor
			this.y_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.y, this.y_marginal_F);
			this.Changed_y_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for replicates of 'mean_F'
			this.mean_F = new Gaussian[98];
			this.precision_F = Gamma.Uniform();
			// Create array for 'precision_rep' Backwards messages.
			this.precision_rep_B = new Gamma[98];
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_X_y_isDone = false;
				}
				this.Changed_numberOfIterations_X_y_isDone = false;
			}
			this.Changed_y();
			this.Changed_X();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_X_y(initialise);
			this.Changed_numberOfIterations_X_y(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="X") {
				return this.X;
			}
			if (variableName=="y") {
				return this.y;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="y") {
				return this.YMarginal();
			}
			if (variableName=="X") {
				return this.XMarginal();
			}
			if (variableName=="phi") {
				return this.PhiMarginal();
			}
			if (variableName=="precision") {
				return this.PrecisionMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'phi' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public VectorGaussian PhiMarginal()
		{
			return this.phi_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'precision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma PrecisionMarginal()
		{
			return this.precision_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="X") {
				this.X = (Vector[])value;
				return ;
			}
			if (variableName=="y") {
				this.y = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'X' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Vector[]> XMarginal()
		{
			return this.X_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'y' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> YMarginal()
		{
			return this.y_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
